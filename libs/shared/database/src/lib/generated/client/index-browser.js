
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password_hash: 'password_hash',
  name: 'name',
  avatarUrl: 'avatarUrl',
  createdAt: 'createdAt',
  lastLoginAt: 'lastLoginAt',
  isVerified: 'isVerified',
  isMainAccount: 'isMainAccount',
  role: 'role'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  refreshToken: 'refreshToken',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  maxSharedAccounts: 'maxSharedAccounts',
  videoQuality: 'videoQuality'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  start_date: 'start_date',
  end_date: 'end_date',
  renewal_status: 'renewal_status'
};

exports.Prisma.SharedAccountScalarFieldEnum = {
  id: 'id',
  ownerUserId: 'ownerUserId',
  sharedUserId: 'sharedUserId',
  subscriptionId: 'subscriptionId',
  shared_on: 'shared_on',
  status: 'status',
  is_active: 'is_active'
};

exports.Prisma.SharedAccountUserScalarFieldEnum = {
  id: 'id',
  sharedAccountId: 'sharedAccountId',
  userId: 'userId',
  profile_name: 'profile_name',
  is_kid_profile: 'is_kid_profile',
  avatar_url: 'avatar_url',
  pin_code: 'pin_code',
  created_at: 'created_at'
};

exports.Prisma.VideoMetadataScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  thumbnailUrl: 'thumbnailUrl',
  secondaryImage: 'secondaryImage',
  releaseDate: 'releaseDate',
  platformDate: 'platformDate',
  ageRating: 'ageRating',
  productionHouse: 'productionHouse',
  productionCountry: 'productionCountry',
  director: 'director',
  formatId: 'formatId',
  categoryId: 'categoryId',
  status: 'status'
};

exports.Prisma.VideoFileScalarFieldEnum = {
  id: 'id',
  filePath: 'filePath',
  trailerPath: 'trailerPath',
  duration: 'duration',
  width: 'width',
  height: 'height'
};

exports.Prisma.VideoGenreScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ActorScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.VideoActorScalarFieldEnum = {
  videoId: 'videoId',
  actorId: 'actorId',
  role: 'role'
};

exports.Prisma.VideoLanguageScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name'
};

exports.Prisma.VideoFormatScalarFieldEnum = {
  id: 'id',
  format: 'format',
  description: 'description'
};

exports.Prisma.VideoCategoryScalarFieldEnum = {
  id: 'id',
  category: 'category',
  description: 'description'
};

exports.Prisma.MovieScalarFieldEnum = {
  id: 'id',
  metadataId: 'metadataId',
  videoFileId: 'videoFileId',
  status: 'status',
  type: 'type',
  seasonCount: 'seasonCount',
  rentalPrice: 'rentalPrice'
};

exports.Prisma.SeriesScalarFieldEnum = {
  id: 'id',
  metadataId: 'metadataId',
  status: 'status',
  type: 'type',
  seasonCount: 'seasonCount',
  rentalPrice: 'rentalPrice'
};

exports.Prisma.SeasonScalarFieldEnum = {
  id: 'id',
  seriesId: 'seriesId',
  number: 'number'
};

exports.Prisma.EpisodeScalarFieldEnum = {
  id: 'id',
  seasonId: 'seasonId',
  number: 'number',
  videoFileId: 'videoFileId',
  metadataId: 'metadataId'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.MovieTagScalarFieldEnum = {
  movieId: 'movieId',
  tagId: 'tagId'
};

exports.Prisma.SeriesTagScalarFieldEnum = {
  seriesId: 'seriesId',
  tagId: 'tagId'
};

exports.Prisma.SubtitleScalarFieldEnum = {
  videoId: 'videoId',
  language: 'language',
  subtitle_url: 'subtitle_url',
  videoMetadataId: 'videoMetadataId'
};

exports.Prisma.PurchaseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  videoId: 'videoId',
  purchase_date: 'purchase_date',
  expiration_date: 'expiration_date'
};

exports.Prisma.ViewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  profileId: 'profileId',
  videoId: 'videoId',
  viewed_at: 'viewed_at',
  progress_seconds: 'progress_seconds'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  videoId: 'videoId',
  text: 'text',
  created_at: 'created_at',
  parentCommentId: 'parentCommentId'
};

exports.Prisma.AdScalarFieldEnum = {
  id: 'id',
  title: 'title',
  image_url: 'image_url',
  video_url: 'video_url',
  start_date: 'start_date',
  end_date: 'end_date',
  is_active: 'is_active'
};

exports.Prisma.AdViewScalarFieldEnum = {
  id: 'id',
  adId: 'adId',
  userId: 'userId',
  profileId: 'profileId',
  viewed_at: 'viewed_at'
};

exports.Prisma.SharedProfileActivityScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  action: 'action',
  details: 'details',
  performed_at: 'performed_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.VideoQuality = exports.$Enums.VideoQuality = {
  SD: 'SD',
  HD: 'HD',
  UHD: 'UHD'
};

exports.RenewalStatus = exports.$Enums.RenewalStatus = {
  AUTO_RENEW: 'AUTO_RENEW',
  MANUAL: 'MANUAL',
  CANCELLED: 'CANCELLED'
};

exports.SharedAccountStatus = exports.$Enums.SharedAccountStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REVOKED: 'REVOKED'
};

exports.ProfileActivityAction = exports.$Enums.ProfileActivityAction = {
  LOGIN: 'LOGIN',
  CONTENT_ACCESS: 'CONTENT_ACCESS',
  SETTINGS_CHANGE: 'SETTINGS_CHANGE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  SubscriptionPlan: 'SubscriptionPlan',
  Subscription: 'Subscription',
  SharedAccount: 'SharedAccount',
  SharedAccountUser: 'SharedAccountUser',
  VideoMetadata: 'VideoMetadata',
  VideoFile: 'VideoFile',
  VideoGenre: 'VideoGenre',
  Actor: 'Actor',
  VideoActor: 'VideoActor',
  VideoLanguage: 'VideoLanguage',
  VideoFormat: 'VideoFormat',
  VideoCategory: 'VideoCategory',
  Movie: 'Movie',
  Series: 'Series',
  Season: 'Season',
  Episode: 'Episode',
  Tag: 'Tag',
  MovieTag: 'MovieTag',
  SeriesTag: 'SeriesTag',
  Subtitle: 'Subtitle',
  Purchase: 'Purchase',
  View: 'View',
  Comment: 'Comment',
  Ad: 'Ad',
  AdView: 'AdView',
  SharedProfileActivity: 'SharedProfileActivity'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
