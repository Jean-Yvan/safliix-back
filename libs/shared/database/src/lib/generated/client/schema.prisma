// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// MODÈLES PRINCIPAUX
// =============================================

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password_hash String
  name          String?
  avatarUrl     String?
  createdAt     DateTime  @default(now())
  lastLoginAt   DateTime?
  isVerified    Boolean   @default(false)
  isMainAccount Boolean   @default(true)
  role          UserRole  @default(USER)

  // Relations
  sessions            Session[]
  subscriptions       Subscription[]
  ownedSharedAccounts SharedAccount[]     @relation("OwnerAccounts")
  sharedProfiles      SharedAccountUser[]
  purchases           Purchase[]
  views               View[]
  comments            Comment[]

  SharedAccount SharedAccount[]
  adViews       AdView[] // Added opposite relation for AdView
}

model Session {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  refreshToken String   @unique
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  @@index([userId, refreshToken])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

// =============================================
// ABONNEMENTS ET COMPTES PARTAGÉS
// =============================================

model SubscriptionPlan {
  id                String         @id @default(uuid())
  name              String         @unique
  price             Float
  maxSharedAccounts Int            @default(0)
  videoQuality      VideoQuality
  subscriptions     Subscription[]
}

enum VideoQuality {
  SD
  HD
  UHD
}

model Subscription {
  id             String           @id @default(uuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  plan           SubscriptionPlan @relation(fields: [planId], references: [id])
  planId         String
  start_date     DateTime
  end_date       DateTime
  renewal_status RenewalStatus    @default(AUTO_RENEW)
  sharedAccounts SharedAccount[]
}

enum RenewalStatus {
  AUTO_RENEW
  MANUAL
  CANCELLED
}

model SharedAccount {
  id             String              @id @default(uuid())
  owner          User                @relation("OwnerAccounts", fields: [ownerUserId], references: [id])
  ownerUserId    String
  sharedUser     User?               @relation(fields: [sharedUserId], references: [id])
  sharedUserId   String?
  subscription   Subscription        @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  shared_on      DateTime            @default(now())
  status         SharedAccountStatus @default(PENDING)
  is_active      Boolean             @default(true)
  profiles       SharedAccountUser[]
}

enum SharedAccountStatus {
  PENDING
  ACCEPTED
  REVOKED
}

model SharedAccountUser {
  id              String        @id @default(uuid())
  sharedAccount   SharedAccount @relation(fields: [sharedAccountId], references: [id])
  sharedAccountId String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  profile_name    String
  is_kid_profile  Boolean       @default(false)
  avatar_url      String?
  pin_code        String?
  created_at      DateTime      @default(now())

  // Relations
  views      View[]
  adViews    AdView[]
  activities SharedProfileActivity[]

  @@unique([sharedAccountId, profile_name])
}

// =============================================
// CONTENU (VIDÉOS, FILMS, SÉRIES)
// =============================================

model VideoMetadata {
  id                String         @id @default(uuid())
  title             String
  description       String
  thumbnailUrl      String         @map("main_image")
  secondaryImage    String?
  releaseDate       DateTime       @map("theater_release")
  platformDate      DateTime       @map("platform_publish")
  ageRating         String
  productionHouse   String
  productionCountry String
  director          String
  format            VideoFormat?   @relation(fields: [formatId], references: [id])
  formatId          String?
  category          VideoCategory? @relation(fields: [categoryid], references: [id])
  categoryid        String?
  status            String         @default("DRAFT")

  // Relations
  movie     Movie?
  episode   Episode?
  series    Series?
  genres    VideoGenre[]
  actors    VideoActor[]
  subtitles Subtitle[]      @relation("VideoMetadataToSubtitle")
  languages VideoLanguage[]

  @@map("video_metadata")
}

model VideoFile {
  id          String  @id @default(uuid())
  filePath    String
  trailerPath String?
  duration    Int     @map("duration_seconds")
  width       Int?
  height      Int?

  // Relations
  movie     Movie?
  episode   Episode?
  subtitles Subtitle[] // Opposite relation for Subtitle
  purchases Purchase[] // Opposite relation for Purchase
  comments  Comment[] // Opposite relation for Comment
  views     View[] // Opposite relation for View

  @@map("video_files")
}

model VideoGenre {
  id     String          @id @default(uuid())
  name   String          @unique
  videos VideoMetadata[]

  @@map("video_genres")
}

model Actor {
  id         String       @id @default(uuid())
  name       String
  VideoActor VideoActor[]

  @@map("video_actors")
}

model VideoActor {
  video   VideoMetadata @relation(fields: [videoId], references: [id])
  videoId String
  actor   Actor         @relation(fields: [actorId], references: [id])
  actorId String
  role    String?

  @@id([videoId, actorId])
}

model VideoLanguage {
  id     String          @id @default(uuid())
  code   String          @unique
  name   String
  videos VideoMetadata[]

  @@map("video_languages")
}

// Enums complémentaires
enum AgeRating {
  G
  PG
  PG_13
  R
  NC_17
}

model VideoFormat {
  id          String          @id @default(uuid())
  format      String          @unique
  description String?
  videos      VideoMetadata[]
}

model VideoCategory {
  id          String          @id @default(uuid())
  category    String          @unique
  description String?
  videos      VideoMetadata[]
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// ===== AGGREGATE ROOT 1 =====
model Movie {
  id          String        @id @default(uuid())
  metadata    VideoMetadata @relation(fields: [metadataId], references: [id])
  metadataId  String        @unique
  videoFile   VideoFile     @relation(fields: [videoFileId], references: [id])
  videoFileId String        @unique
  tags        MovieTag[]
  status      String        @default("draft")
  type        String        @default("location")
  seasonCount Int           @default(0)
  rentalPrice Float?        @default(0)

  // Règles métier (ex: durée max)
  @@map("movies")
}

// ===== AGGREGATE ROOT 2 =====
model Series {
  id          String        @id @default(uuid())
  metadata    VideoMetadata @relation(fields: [metadataId], references: [id])
  metadataId  String        @unique
  seasons     Season[]
  tags        SeriesTag[]
  status      String        @default("draft")
  type        String        @default("location")
  seasonCount Int           @default(0)
  rentalPrice Float?        @default(0)

  @@map("series")
}

model Season {
  id       String    @id @default(uuid())
  series   Series    @relation(fields: [seriesId], references: [id])
  seriesId String
  number   Int
  episodes Episode[]

  @@unique([seriesId, number])
}

model Episode {
  id          String        @id @default(uuid())
  season      Season        @relation(fields: [seasonId], references: [id])
  seasonId    String
  number      Int
  videoFile   VideoFile     @relation(fields: [videoFileId], references: [id])
  videoFileId String        @unique
  metadata    VideoMetadata @relation(fields: [metadataId], references: [id])
  metadataId  String        @unique

  @@unique([seasonId, number])
  @@map("episodes")
}

// =============================================
// ENRICHISSEMENT DU CONTENU
// =============================================

model Tag {
  id   String @id @default(uuid())
  name String @unique

  // Relations
  movieTags  MovieTag[]
  seriesTags SeriesTag[]
}

model MovieTag {
  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId String
  tag     Tag    @relation(fields: [tagId], references: [id])
  tagId   String

  @@id([movieId, tagId])
}

model SeriesTag {
  series   Series @relation(fields: [seriesId], references: [id])
  seriesId String
  tag      Tag    @relation(fields: [tagId], references: [id])
  tagId    String

  @@id([seriesId, tagId])
}

model Subtitle {
  video        VideoFile @relation(fields: [videoId], references: [id])
  videoId      String
  language     String
  subtitle_url String

  videoMetadata   VideoMetadata? @relation("VideoMetadataToSubtitle", fields: [videoMetadataId], references: [id])
  videoMetadataId String?

  @@id([videoId, language])
}

// =============================================
// INTERACTIONS UTILISATEURS
// =============================================

model Purchase {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  video           VideoFile @relation(fields: [videoId], references: [id])
  videoId         String
  purchase_date   DateTime  @default(now())
  expiration_date DateTime?
}

model View {
  id               String             @id @default(uuid())
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  profile          SharedAccountUser? @relation(fields: [profileId], references: [id])
  profileId        String?
  video            VideoFile          @relation(fields: [videoId], references: [id])
  videoId          String
  viewed_at        DateTime           @default(now())
  progress_seconds Int                @default(0)
}

model Comment {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  video           VideoFile @relation(fields: [videoId], references: [id])
  videoId         String
  text            String
  created_at      DateTime  @default(now())
  parent          Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId String?
  replies         Comment[] @relation("CommentReplies")
}

// =============================================
// PUBLICITÉS
// =============================================

model Ad {
  id         String   @id @default(uuid())
  title      String
  image_url  String
  video_url  String?
  start_date DateTime
  end_date   DateTime
  is_active  Boolean  @default(true)

  // Relations
  views AdView[]
}

model AdView {
  id        String             @id @default(uuid())
  ad        Ad                 @relation(fields: [adId], references: [id])
  adId      String
  user      User?              @relation(fields: [userId], references: [id])
  userId    String?
  profile   SharedAccountUser? @relation(fields: [profileId], references: [id])
  profileId String?
  viewed_at DateTime           @default(now())
}

// =============================================
// AUDIT ET ACTIVITÉ
// =============================================

model SharedProfileActivity {
  id           String                @id @default(uuid())
  profile      SharedAccountUser     @relation(fields: [profileId], references: [id])
  profileId    String
  action       ProfileActivityAction
  details      Json?
  performed_at DateTime              @default(now())
}

enum ProfileActivityAction {
  LOGIN
  CONTENT_ACCESS
  SETTINGS_CHANGE
}
